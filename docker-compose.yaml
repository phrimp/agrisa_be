services:
  # Traefik API Gateway
  traefik:
    image: traefik:latest
    container_name: agrisa-traefik
    restart: unless-stopped
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      - "${TRAEFIK_HTTPS_PORT:-443}:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=agrisa_traefik-net
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      # Global CORS middleware applied to all services automatically
      - --entrypoints.web.http.middlewares=global-cors@docker
      - --entrypoints.websecure.http.middlewares=global-cors@docker
    networks:
      - traefik-net

  # Global CORS Middleware Configuration Service
  cors-middleware:
    image: traefik/whoami
    container_name: agrisa-cors-config
    restart: unless-stopped
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      # Global CORS middleware definition - applied automatically to all services
      - "traefik.http.middlewares.global-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,PATCH,OPTIONS"
      - "traefik.http.middlewares.global-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.global-cors.headers.accesscontrolalloworiginlist=*"
      # - "traefik.http.middlewares.global-cors.headers.accesscontrolalloworiginlist=https://agrisa.phrimp.io.vn"
      - "traefik.http.middlewares.global-cors.headers.accesscontrolmaxage=86400"
      - "traefik.http.middlewares.global-cors.headers.addvaryheader=true"

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: agrisa-rabbitmq
    restart: unless-stopped
    ports:
      - ":5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./logs/rabbitmq:/var/log/rabbitmq
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=false"

  # MongoDB Service
  mongodb:
    image: mongo:latest
    container_name: agrisa-mongodb
    restart: unless-stopped
    ports:
      - ":27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-example}
    volumes:
      - mongodb_data:/data/db
      - ./logs/mongodb:/var/log/mongodb
    command: mongod --logpath /var/log/mongodb/mongodb.log --logRotate reopen --logappend
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=false"

  # MongoDB Express - Web-based MongoDB admin interface
  mongo-express:
    image: mongo-express:latest
    container_name: agrisa-mongo-express
    restart: unless-stopped
    ports:
      - ":8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USERNAME:-root}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD:-example}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USERNAME:-root}:${MONGODB_PASSWORD:-example}@mongodb:27017/
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-pass}
      ME_CONFIG_SITE_BASEURL: ${MONGO_EXPRESS_BASEURL:-/}
    networks:
      - traefik-net
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express.rule=Host(`mongo-express.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.mongo-express.entrypoints=web"
      - "traefik.http.services.mongo-express.loadbalancer.server.port=8081"

  # Redis Service
  redis:
    image: redis:latest
    container_name: agrisa-redis
    restart: unless-stopped
    ports:
      - ":6379"
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    environment:
      - REDIS_LOG_LEVEL=${REDIS_LOG_LEVEL:-notice}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-example}
    networks:
      - traefik-net
    command: redis-server --requirepass ${REDIS_PASSWORD:-example} --loglevel ${REDIS_LOG_LEVEL:-notice} --logfile /var/log/redis/redis.log
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-example}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=false"

  # PostgreSQL with PostGIS extension
  postgres:
    image: postgis/postgis:17-master
    container_name: agrisa-postgres
    restart: unless-stopped
    ports:
      - "9406:9406"
    environment:
      POSTGRES_DB: ${POSTGRES_DEFAULT_DB:-agrisa}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST: ${POSTGRES_HOST:-localhost}
      POSTGRES_PORT: ${POSTGRES_PORT:-9406}
      PGDATA: /var/lib/postgresql/data/pgdata
    command: ["postgres", "-c", "port=9406"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DEFAULT_DB:-agrisa} -p 9406"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=false"

  # Auth Service
  auth-service:
    build:
      context: ./
      dockerfile: services/auth-service/Dockerfile
    container_name: agrisa-auth-service
    restart: unless-stopped
    ports:
      - "${AUTH_SERVICE_PORT:-8083}:8083"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-localhost}
      - POSTGRES_PORT=${POSTGRES_PORT:-9406}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${AUTH_SERVICE_DB_NAME:-agrisa}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-example}
      - SERVER_PORT=8083
      - MINIO_ENDPOINT=${MINIO_URL}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_LOCATION=${MINIO_LOCATION}
      - MINIO_SECURE=${MINIO_SECURE}
      - MINIO_RESOURCE_URL=${MINIO_RESOURCE_URL}
      - FPT_EKYC_API_KEY=${FPT_EKYC_API_KEY}
      - FPT_OCR_URL=${FPT_OCR_URL}
      - FPT_FACE_LIVENESS_URL=${FPT_FACE_LIVENESS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_PWD=${ADMIN_PWD}

    volumes:
      - ./logs/auth-service:/agrisa/log/auth_service
    networks:
      - traefik-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
    - "traefik.enable=true"
    - "traefik.http.services.auth-service.loadbalancer.server.port=8083"

    - "traefik.http.routers.auth-public.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/auth/public`)"
    - "traefik.http.routers.auth-public.entrypoints=web"
    - "traefik.http.routers.auth-public.service=auth-service"
    - "traefik.http.routers.auth-public.middlewares=global-cors"

    - "traefik.http.routers.auth-protected.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/auth/protected`)"
    - "traefik.http.routers.auth-protected.entrypoints=web"
    - "traefik.http.routers.auth-protected.service=auth-service"
    - "traefik.http.routers.auth-protected.middlewares=global-cors,auth-middleware"

    - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://auth-service:8083/auth/validate"
    - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-User-ID,X-User-Name,X-User-Email,X-User-Role"
    - "traefik.http.middlewares.auth-middleware.forwardauth.trustForwardHeader=true"


networks:
  traefik-net:
    driver: bridge
    name: agrisa_traefik-net

volumes:
  mongodb_data:
  redis_data:
  postgres_data:
  rabbitmq_data:
  minio_data:
